<?php

namespace SOB\PHPFUI\Record\Definition;

/**
 * Autogenerated. Do not modify. Modify SQL table, then generate with \PHPFUI\ORM\Tool\Generate\CRUD class.
 *
 * @property string $stringDefaultNotNull MySQL type varchar(100)
 * @property ?string $stringDefaultNull MySQL type varchar(100)
 * @property ?string $stringDefaultNullable MySQL type varchar(100)
 * @property int $stringRecordId MySQL type integer
 * @property string $stringRequired MySQL type varchar(100)
 */
abstract class StringRecord extends \PHPFUI\ORM\Record
	{
	protected static bool $autoIncrement = true;

	/** @var array<string, \PHPFUI\ORM\FieldDefinition> */
	protected static array $fields = [];

	/** @var array<string> */
	protected static array $primaryKeys = ['stringRecordId', ];

	protected static string $table = 'stringRecord';

	public function initFieldDefinitions() : static
		{
		if (! \count(static::$fields))
			{
			static::$fields = [
				'stringDefaultNotNull' => new \PHPFUI\ORM\FieldDefinition('varchar(100)', 'string', 100, false, 'default', ),
				'stringDefaultNull' => new \PHPFUI\ORM\FieldDefinition('varchar(100)', 'string', 100, true, null, ),
				'stringDefaultNullable' => new \PHPFUI\ORM\FieldDefinition('varchar(100)', 'string', 100, true, 'default', ),
				'stringRecordId' => new \PHPFUI\ORM\FieldDefinition('integer', 'int', 0, false, ),
				'stringRequired' => new \PHPFUI\ORM\FieldDefinition('varchar(100)', 'string', 100, false, ),
			];
			}

		return $this;
		}
	}
